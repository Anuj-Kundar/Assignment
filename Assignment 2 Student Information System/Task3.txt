---Task 3:Aggregate functions, Having, Order By, GroupBy and Joins---
=====================================================================

1. Write an SQL query to calculate the total payments made by a specific student. You will need to
   join the "Payments" table with the "Students" table based on the student's ID.

mysql> SELECT s.first_name, s.last_name, p.amount AS total_payments
    -> FROM Students s
    -> JOIN Payments p ON s.student_id = p.student_id
    -> WHERE s.student_id = 1;
+------------+-----------+----------------+
| first_name | last_name | total_payments |
+------------+-----------+----------------+
| Anuj       | Kundar    |        1500.00 |
+------------+-----------+----------------+
1 row in set (0.00 sec)

------------------------------------------------------------------------------------------------------------------------

2. Write an SQL query to retrieve a list of courses along with the count of students enrolled in each
course. Use a JOIN operation between the "Courses" table and the "Enrollments" table.

mysql> SELECT c.course_name, COUNT(e.student_id) AS student_count
    -> FROM Courses c
    -> JOIN Enrollments e ON c.course_id = e.course_id
    -> GROUP BY c.course_id;
+--------------------+---------------+
| course_name        | student_count |
+--------------------+---------------+
| Computer Science   |             2 |
| Physics            |             2 |
| Chemistry          |             2 |
| Biology            |             2 |
| English Literature |             2 |
+--------------------+---------------+
5 rows in set (0.07 sec)

----------------------------------------------------------------------------------------------------------------------------------------

3. Write an SQL query to find the names of students who have not enrolled in any course. Use a LEFT JOIN 
   between the "Students" table and the "Enrollments" table to identify students without enrollments.

mysql> SELECT s.first_name, s.last_name
    -> FROM Students s
    -> LEFT JOIN Enrollments e ON s.student_id = e.student_id
    -> WHERE e.enrollment_id IS NULL;
Empty set (0.00 sec)

----------------------------------------------------------------------------------------------------------------------------------------

4. Write an SQL query to retrieve the first name, last name of students, and the names of the courses they are enrolled in.
   Use JOIN operations between the "Students" table and the "Enrollments" and "Courses" tables.

mysql> SELECT s.first_name, s.last_name, c.course_name
    -> FROM Students s
    -> JOIN Enrollments e ON s.student_id = e.student_id
    -> JOIN Courses c ON e.course_id = c.course_id;
+------------+-----------+--------------------+
| first_name | last_name | course_name        |
+------------+-----------+--------------------+
| Anuj       | Kundar    | Computer Science   |
| Pritesh    | Rai       | Physics            |
| Chirag     | Padyal    | Chemistry          |
| Ayyaj      | Aga       | Biology            |
| Sahil      | Babar     | English Literature |
| Prashant   | Thombre   | Computer Science   |
| Sandeep    | Bais      | Physics            |
| Vishnukant | Mule      | Chemistry          |
| Prathamesh | Naik      | Biology            |
| Devraj     | Dumbre    | English Literature |
+------------+-----------+--------------------+
10 rows in set (0.01 sec)

----------------------------------------------------------------------------------------------------------------------------------------

5. Create a query to list the names of teachers and the courses they are assigned to. Join the
   "Teacher" table with the "Courses" table.

mysql> SELECT t.first_name, t.last_name, c.course_name
    -> FROM Teacher t
    -> JOIN Courses c ON t.teacher_id = c.teacher_id;
+------------+-----------+--------------------+
| first_name | last_name | course_name        |
+------------+-----------+--------------------+
| Mohammed   | Javeed    | Computer Science   |
| Sailesh    | Sakpal    | Physics            |
| Nilesh     | Sakpal    | Chemistry          |
| Athul      | Nair      | Biology            |
| Anjali     | Sharma    | English Literature |
| Sailesh    | Sakpal    | History            |
| Priya      | Reddy     | Geography          |
| Sneha      | Patil     | Mathematics        |
| Amit       | Singh     | Philosophy         |
| Divya      | Mehra     | Psychology         |
+------------+-----------+--------------------+
10 rows in set (0.01 sec)

----------------------------------------------------------------------------------------------------------------------------------------

6. Retrieve a list of students and their enrollment dates for a specific course. You'll need to join the
   "Students" table with the "Enrollments" and "Courses" tables.

mysql> SELECT s.first_name, s.last_name, e.enrollment_date, c.course_name
    -> FROM Students s
    -> JOIN Enrollments e ON s.student_id = e.student_id
    -> JOIN Courses c ON e.course_id = c.course_id
    -> WHERE c.course_id = 1;
+------------+-----------+-----------------+------------------+
| first_name | last_name | enrollment_date | course_name      |
+------------+-----------+-----------------+------------------+
| Anuj       | Kundar    | 2024-01-01      | Computer Science |
| Prashant   | Thombre   | 2024-06-01      | Computer Science |
+------------+-----------+-----------------+------------------+
2 rows in set (0.01 sec)

----------------------------------------------------------------------------------------------------------------------------------------
7. Find the names of students who have not made any payments. Use a LEFT JOIN between the
  "Students" table and the "Payments" table and filter for students with NULL payment records.

mysql> SELECT s.first_name, s.last_name
    -> FROM Students s
    -> LEFT JOIN Payments p ON s.student_id = p.student_id
    -> WHERE p.payment_id IS NULL;
Empty set (0.00 sec)

----------------------------------------------------------------------------------------------------------------------------------------

8. Write a query to identify courses that have no enrollments. You'll need to use a LEFT JOIN
   between the "Courses" table and the "Enrollments" table and filter for courses with NULL enrollment records.

mysql> SELECT c.course_name
    -> FROM Courses c
    -> LEFT JOIN Enrollments e ON c.course_id = e.course_id
    -> WHERE e.enrollment_id IS NULL;
+-------------+
| course_name |
+-------------+
| History     |
| Geography   |
| Mathematics |
| Philosophy  |
| Psychology  |
+-------------+
5 rows in set (0.00 sec)

----------------------------------------------------------------------------------------------------------------------------------------

9. Identify students who are enrolled in more than one course. Use a self-join on the "Enrollments"
   table to find students with multiple enrollment records.

mysql> SELECT s.first_name, s.last_name, COUNT(e.course_id) AS course_count
    -> FROM Students s
    -> JOIN Enrollments e ON s.student_id = e.student_id
    -> GROUP BY s.student_id
    -> HAVING COUNT(e.course_id) > 1;
Empty set (0.01 sec)

----------------------------------------------------------------------------------------------------------------------------------------

10. Find teachers who are not assigned to any courses. Use a LEFT JOIN between the "Teacher"
    table and the "Courses" table and filter for teachers with NULL course assignments

mysql> SELECT t.first_name, t.last_name
    -> FROM Teacher t
    -> LEFT JOIN Courses c ON t.teacher_id = c.teacher_id
    -> WHERE c.course_id IS NULL;
+------------+-----------+
| first_name | last_name |
+------------+-----------+
| Rahul      | Verma     |
+------------+-----------+
1 row in set (0.04 sec)

----------------------------------------------------------------------------------------------------------------------------------------